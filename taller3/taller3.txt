TALLER 3

VÍCTOR SAMUEL PÉREZ DÍAZ

4.

En Java tenemos:

- const list<i32> num= [1,2,3,4,5]

Para esta constante se crea un archivo llamado samuelConstants.java, el cual crea una clase pública para las constantes y añade una definición de la lista como un ArrayList de enteros de Java.

    public class samuelConstants {

    public static final java.util.List<java.lang.Integer> num = new java.util.ArrayList<java.lang.Integer>();
    static {
        num.add(1);
        num.add(2);
        num.add(3);
        num.add(4);
        num.add(5);
    }

    }

- enum french_suite

Para esta enumeración se crea un propio archivo llamado french_suite.java, donde se construye la enumeración, y además se definen métodos para obtener el value de un tipo y encontrar el tipo según el value.

    @javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-02-19")
    public enum french_suite implements org.apache.thrift.TEnum {
    DIAMOND(1),
    CLUB(2),
    HEART(3),
    SPADE(4);

    private final int value;

    private french_suite(int value) {
        * Get the integer value of this enum value, as defined in the Thrift IDL.
    */
    public int getValue() {
        return value;
    }

    /**
    * Find a the enum type by its integer value, as defined in the Thrift IDL.
    * @return null if the value is not found.
    */
    @org.apache.thrift.annotation.Nullable
    public static french_suite findByValue(int value) { 
        switch (value) {
        case 1:
            return DIAMOND;
        case 2:
            return CLUB;
        case 3:
            return HEART;
        case 4:
            return SPADE;
        return value;
    }

    /**
    * Find a the enum type by its integer value, as defined in the Thrift IDL.
    * @return null if the value is not found.
    */
    @org.apache.thrift.annotation.Nullable
    public static french_suite findByValue(int value) { 
        switch (value) {
        case 1:
            return DIAMOND;
        case 2:
            return CLUB;
        case 3:
            return HEART;
    

    /**
    * Find a the enum type by its integer value, as defined in the Thrift IDL.
    * @return null if the value is not found.
    */
    @org.apache.thrift.annotation.Nullable
    public static french_suite findByValue(int value) { 
        switch (value) {
        case 1:
            return DIAMOND;
        case 2:
            return CLUB;
        case 3:
            return HEART;
        case 4:
            return SPADE;
        default:
            return null;
        }
    }
    }*/
    public int getValue() {
        return value;
    }

    /**
    * Find a the enum type by its integer value, as defined in the Thrift IDL.
    * @return null if the value is not found.
    */
    @org.apache.thrift.annotation.Nullable
    public static french_suite findByValue(int value) { 
        switch (value) {
        case 1:
            return DIAMOND;
        case 2:
            return CLUB;
        case 3:
            return HEART;
        case 4:
            return SPADE;
        default:
            return null;
        }
    }
    }
- struct Programa

Se crea el archivo llamado Programa.java, en el cual se construye la estructura Programa con Java. Es un programa largo, por las diversas funciones de thrift. Pero lo más relevante sería la declaracupib de los campos de la estructura, junto a sus métodos de búsqueda y manipulación:

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    NOMBRE((short)2, "nombre"),
    APELLIDO((short)3, "apellido"),
    PROGRAMA((short)4, "programa");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NOMBRE
          return NOMBRE;
        case 3: // APELLIDO
          return APELLIDO;
        case 4: // PROGRAMA
          return PROGRAMA;
        default:
          return null;
      }
    }

- service BigData

Se crea el archivo BigData.java, donde se declara la clase BigData, y en la cual se definen cada uno de los métodos con los argumentos dados, esto se resume bien en el siguiente bloque:

    public class BigData {

    public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public boolean name(java.lang.String nombre, java.lang.String apellido) throws org.apache.thrift.TException;

    public double add(double fl1, double fl2) throws org.apache.thrift.TException;

    public void receive(java.lang.String str) throws org.apache.thrift.TException;

    }

En Python tenemos:

- const list<i32> num= [1,2,3,4,5]

Se crea el archivo constants.py, donde se define la lista num:

    import sys
    from .ttypes import *
    num = [
        1,
        2,
        3,
        4,
        5,
    ]

- enum french_suite

En el archivo ttypes.py, se define la clase french_suite, en la cual se definen los tipos de la enumeración y sus correspondencias:

    class french_suite(object):
    DIAMOND = 1
    CLUB = 2
    HEART = 3
    SPADE = 4

    _VALUES_TO_NAMES = {
        1: "DIAMOND",
        2: "CLUB",
        3: "HEART",
        4: "SPADE",
    }

    _NAMES_TO_VALUES = {
        "DIAMOND": 1,
        "CLUB": 2,
        "HEART": 3,
        "SPADE": 4,
    }

- struct Programa

En el archivo ttypes.py se define la clase Programa, en la cual se incluyen sus atributos, métodos de escritura, lectura y relevantes a thrift:


    class Programa(object):
        """
        Attributes:
        - ID
        - nombre
        - apellido
        - programa

        """


        def __init__(self, ID=None, nombre=None, apellido=None, programa=None,):
            self.ID = ID
            self.nombre = nombre
            self.apellido = apellido
            self.programa = programa

5.

